// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskService.Persistence.Contexts;

#nullable disable

namespace TaskService.Persistence.Migrations.EventStore
{
    [DbContext(typeof(TaskEventStoreContext))]
    [Migration("20241017111116_InitialEventStore")]
    partial class InitialEventStore
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskService.Domain.Events.Base.BaseTaskEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("VersionId")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id", "VersionId");

                    b.HasIndex("Id", "VersionId")
                        .IsUnique();

                    b.ToTable("TaskEvents");

                    b.HasDiscriminator().IsComplete(true).HasValue("BaseTaskEvent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TaskService.Domain.Projections.GlobalTaskProjection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Author")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Difficult")
                        .HasColumnType("integer");

                    b.Property<int?>("ExecutionTime")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("GlobalTaskProjection");
                });

            modelBuilder.Entity("TaskService.Domain.Projections.SentToCheckTaskProjection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Author")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Difficult")
                        .HasColumnType("integer");

                    b.Property<int?>("ExecutionTime")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("SentToCheckTaskProjection");
                });

            modelBuilder.Entity("TaskService.Domain.Projections.TaskProjection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Author")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Difficult")
                        .HasColumnType("integer");

                    b.Property<int?>("ExecutionTime")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("TaskProjection");
                });

            modelBuilder.Entity("TaskService.Domain.Events.BaseTaskCreated", b =>
                {
                    b.HasBaseType("TaskService.Domain.Events.Base.BaseTaskEvent");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Author")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Difficult")
                        .HasColumnType("integer");

                    b.Property<int?>("ExecutionTime")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("TaskCreated");
                });

            modelBuilder.Entity("TaskService.Domain.Events.BaseTaskRefused", b =>
                {
                    b.HasBaseType("TaskService.Domain.Events.Base.BaseTaskEvent");

                    b.HasDiscriminator().HasValue("TaskRefused");
                });

            modelBuilder.Entity("TaskService.Domain.Events.BaseTaskRemoved", b =>
                {
                    b.HasBaseType("TaskService.Domain.Events.Base.BaseTaskEvent");

                    b.HasDiscriminator().HasValue("TaskRemoved");
                });

            modelBuilder.Entity("TaskService.Domain.Events.BaseTaskSentToCheck", b =>
                {
                    b.HasBaseType("TaskService.Domain.Events.Base.BaseTaskEvent");

                    b.HasDiscriminator().HasValue("TaskSentToCheck");
                });

            modelBuilder.Entity("TaskService.Domain.Events.BaseTaskSentToGlobal", b =>
                {
                    b.HasBaseType("TaskService.Domain.Events.Base.BaseTaskEvent");

                    b.HasDiscriminator().HasValue("TaskSentToGlobal");
                });

            modelBuilder.Entity("TaskService.Domain.Events.BaseTaskUpdated", b =>
                {
                    b.HasBaseType("TaskService.Domain.Events.Base.BaseTaskEvent");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Difficult")
                        .HasColumnType("integer");

                    b.Property<int?>("ExecutionTime")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("TaskEvents", t =>
                        {
                            t.Property("Answer")
                                .HasColumnName("BaseTaskUpdated_Answer");

                            t.Property("Description")
                                .HasColumnName("BaseTaskUpdated_Description");

                            t.Property("Difficult")
                                .HasColumnName("BaseTaskUpdated_Difficult");

                            t.Property("ExecutionTime")
                                .HasColumnName("BaseTaskUpdated_ExecutionTime");

                            t.Property("Name")
                                .HasColumnName("BaseTaskUpdated_Name");
                        });

                    b.HasDiscriminator().HasValue("TaskUpdated");
                });
#pragma warning restore 612, 618
        }
    }
}
